# -*- coding: utf-8 -*-
"""Pythonmcqs601-650.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bNacNS_FKwQF9P0vb0H4AuwinFxhY6Ht
"""

import streamlit as st
import random
import time

st.markdown('<h1 style="color:blue">Prepared by Devan Das Mehrani AI Student</h1>', unsafe_allow_html=True)

class PythonQuizApp:
    def __init__(self):
        self.questions = self.load_questions()
        if 'current_question' not in st.session_state:
            self.initialize_session_state()

    def initialize_session_state(self):
        st.session_state.current_question = 0
        st.session_state.score = 0
        st.session_state.user_answers = []
        st.session_state.shuffled_indices = list(range(len(self.questions)))
        random.shuffle(st.session_state.shuffled_indices)
        st.session_state.time_per_question = 60  # 1 minute per question
        st.session_state.start_time = time.time()
        st.session_state.timer_expired = True

    def load_questions(self):
        questions = [
            # Question 601-650
            {
            "question": "Which of the following is not a numeric type in Python?",
            "options": ["a) int", "b) float", "c) complex", "d) str"],
            "answer": "d"
            },
            {
            "question": "What is the output of `type(3.14)`?",
            "options": ["a) `<class 'int'>`", "b) `<class 'float'>`", "c) `<class 'complex'>`", "d) `<class 'decimal'>`"],
            "answer": "b"
            },
            {
            "question": "How do you extract the imaginary part of a complex number `z = 2 + 3j`?",
            "options": ["a) `z.real`", "b) `z.imag`", "c) `z.complex`", "d) `z.imaginary`"],
            "answer": "b"
            },
            {
            "question": "Which of the following is considered `False` in a boolean context?",
            "options": ["a) `1`", "b) `\"Hello\"`", "c) `None`", "d) `[1, 2, 3]`"],
            "answer": "c"
            },
            {
            "question": "What is the output of `bool(0)`?",
            "options": ["a) `True`", "b) `False`", "c) `None`", "d) `Error`"],
            "answer": "b"
            },
            {
            "question": "Which of the following is an immutable sequence type?",
            "options": ["a) list", "b) tuple", "c) set", "d) dict"],
            "answer": "b"
            },
            {
            "question": "What is the output of `type(range(5))`?",
            "options": ["a) `<class 'list'>`", "b) `<class 'tuple'>`", "c) `<class 'range'>`", "d) `<class 'set'>`"],
            "answer": "c"
            },
            {
            "question": "Which string declaration is correct for multi-line strings?",
            "options": ["a) `\"Hello, Python!\"`", "b) `'Hello, Python!'`", "c) `'''Hello, Python!'''`", "d) All of the above"],
            "answer": "d"
            },
            {
            "question": "Which of the following is a mutable set type?",
            "options": ["a) set", "b) frozenset", "c) tuple", "d) None"],
            "answer": "a"
            },
            {
            "question": "What is the output of `{1, 2, 2, 3}`?",
            "options": ["a) `{1, 2, 2, 3}`", "b) `{1, 2, 3}`", "c) `Error`", "d) `None`"],
            "answer": "b"
            },

            # Question 611-620
            {
            "question": "Which of the following creates a dictionary?",
            "options": ["a) `{\"name\": \"Alice\", \"age\": 25}`", "b) `[\"name\", \"Alice\", \"age\", 25]`", "c) `(\"name\", \"Alice\", \"age\", 25)`", "d) `{\"name\", \"Alice\", \"age\", 25}`"],
            "answer": "a"
            },
            {
            "question": "What is the output of `type({})`?",
            "options": ["a) `<class 'list'>`", "b) `<class 'tuple'>`", "c) `<class 'dict'>`", "d) `<class 'set'>`"],
            "answer": "c"
            },
            {
            "question": "Which binary type is immutable?",
            "options": ["a) bytes", "b) bytearray", "c) memoryview", "d) None"],
            "answer": "a"
            },
            {
            "question": "What is the output of `bytearray([65, 66, 67])`?",
            "options": ["a) `b'ABC'`", "b) `bytearray(b'ABC')`", "c) `[65, 66, 67]`", "d) `Error`"],
            "answer": "b"
            },
            {
            "question": "What is the type of `None`?",
            "options": ["a) `<class 'None'>`", "b) `<class 'NoneType'>`", "c) `<class 'null'>`", "d) `<class 'object'>`"],
            "answer": "b"
            },
            {
            "question": "What is the output of `None == None`?",
            "options": ["a) `True`", "b) `False`", "c) `Error`", "d) `None`"],
            "answer": "a"
            },
            {
            "question": "In Python, integers in which range are interned (share memory)?",
            "options": ["a) `-10 to 10`", "b) `-5 to 256`", "c) `0 to 1000`", "d) All integers"],
            "answer": "b"
            },
            {
            "question": "What is the output of `id(257) == id(257)`?",
            "options": ["a) `True`", "b) `False`", "c) `Error`", "d) `None`"],
            "answer": "b"
            },
            {
            "question": "What is the output of `int(3.99)`?",
            "options": ["a) `3`", "b) `4`", "c) `3.99`", "d) `Error`"],
            "answer": "a"
            },
            {
            "question": "What is the output of `bool(\"\")`?",
            "options": ["a) `True`", "b) `False`", "c) `None`", "d) `Error`"],
            "answer": "b"
            },

            # Question 621-630
            {
            "question": "What is the output of `isinstance(5, int)`?",
            "options": ["a) `True`", "b) `False`", "c) `None`", "d) `Error`"],
            "answer": "a"
            },
            {
            "question": "What is the output of `isinstance(5.5, (int, float))`?",
            "options": ["a) `True`", "b) `False`", "c) `None`", "d) `Error`"],
            "answer": "a"
            },
            {
            "question": "What is an operand in Python?",
            "options": ["a) A symbol that performs an operation", "b) A value or variable that an operator acts upon", "c) A reserved keyword in Python", "d) A type of loop structure"],
            "answer": "b"
            },
            {
            "question": "Which of the following is a unary operator?",
            "options": ["a) `+` (Addition)", "b) `*` (Multiplication)", "c) `not` (Logical NOT)", "d) `and` (Logical AND)"],
            "answer": "c"
            },
            {
            "question": "What does the `~` operator do in Python?",
            "options": ["a) Performs bitwise NOT (inverts bits)", "b) Performs logical negation", "c) Multiplies a number by -1", "d) Raises a number to a power"],
            "answer": "a"
            },
            {
            "question": "Which arithmetic operator performs floor division?",
            "options": ["a) `/`", "b) `//`", "c) `%`", "d) ``"],
            "answer": "b"
            },
            {
            "question": "What is the output of `5 ** 3`?",
            "options": ["a) 15", "b) 125", "c) 8", "d) 243"],
            "answer": "b"
            },
            {
            "question": "Which comparison operator checks if two values are not equal?",
            "options": ["a) `==`", "b) `!=`", "c) `<>`", "d) Both b and c"],
            "answer": "d"
            },
            {
            "question": "What is the result of `True and False`?",
            "options": ["a) `True`", "b) `False`", "c) `None`", "d) `Error`"],
            "answer": "b"
            },
            {
            "question": "Which assignment operator is equivalent to `x = x + 5`?",
            "options": ["a) `x += 5`", "b) `x =+ 5`", "c) `x -= -5`", "d) `x = 5+`"],
            "answer": "a"
            },

            # Question 631-640
            {
            "question": "What does the `is` operator check?",
            "options": ["a) If two values are equal", "b) If two variables refer to the same object in memory", "c) If a value is present in a list", "d) If a variable is of a certain type"],
            "answer": "b"
            },
            {
            "question": "Which operator checks if a value exists in a sequence?",
            "options": ["a) `in`", "b) `is`", "c) `==`", "d) `contains`"],
            "answer": "a"
            },
            {
            "question": "Which of the following is NOT a Python keyword?",
            "options": ["a) `lambda`", "b) `assert`", "c) `printf`", "d) `yield`"],
            "answer": "c"
            },
            {
            "question": "Which naming convention is recommended for variables in Python?",
            "options": ["a) `camelCase`", "b) `PascalCase`", "c) `snake_case`", "d) `kebab-case`"],
            "answer": "c"
            },
            {
            "question": "What is the output of `5 / 2` in Python?",
            "options": ["a) `2`", "b) `2.5`", "c) `2.0`", "d) `3`"],
            "answer": "b"
            },
            {
            "question": "What does the `%` operator compute?",
            "options": ["a) Division", "b) Exponentiation", "c) Remainder of division", "d) Bitwise AND"],
            "answer": "c"
            },
            {
            "question": "Which of the following is an invalid variable name?",
            "options": ["a) `_private_var`", "b) `2nd_variable`", "c) `total_amount`", "d) `MAX_VALUE`"],
            "answer": "b"
            },
            {
            "question": "What does the `del` keyword do in Python?",
            "options": ["a) Deletes a file from the system", "b) Removes a variable from memory", "c) Clears the console output", "d) Stops a running Python script"],
            "answer": "b"
            },
            {
            "question": "What happens if you try to access a variable after deleting it with `del`?",
            "options": ["a) It returns `None`", "b) It raises a `NameError`", "c) It still retains its value", "d) It automatically recreates the variable"],
            "answer": "b"
            },
            {
            "question": "Which of the following correctly deletes a variable `x`?",
            "options": ["a) `remove x`", "b) `delete x`", "c) `del x`", "d) `x = None`"],
            "answer": "c"
            },

            # Question 641-650
            {
            "question": "What is the output of the following code?\n```python\nx = 100\ndel x\nprint(x)\n```",
            "options": ["a) `100`", "b) `None`", "c) `NameError`", "d) `0`"],
            "answer": "c"
            },
            {
            "question": "Does `del` only work on variables, or can it also delete other objects?",
            "options": ["a) Only variables", "b) Only lists and dictionaries", "c) Any Python object (variables, list elements, dictionary keys, etc.)", "d) Only numbers and strings"],
            "answer": "c"
            },
            {
            "question": "What will be the result of this code?\n```python\nmy_list = [1, 2, 3, 4]\ndel my_list[1]\nprint(my_list)\n```",
            "options": ["a) `[1, 2, 3, 4]`", "b) `[1, 3, 4]`", "c) `[2, 3, 4]`", "d) `Error`"],
            "answer": "b"
            },
            {
            "question": "How does `del` differ from assigning `None` to a variable?",
            "options": ["a) `del` removes the variable completely, while `None` just sets its value to `None`", "b) `del` and `None` do the same thing", "c) `del` only works in functions, while `None` works everywhere", "d) `None` is faster than `del`"],
            "answer": "a"
            },
            {
            "question": "Can `del` be used to delete a key from a dictionary?",
            "options": ["a) No, dictionaries are immutable", "b) Yes, using `del dict_name[key]`", "c) Only if the dictionary is empty", "d) Only if the key is a number"],
            "answer": "b"
            },
            {
            "question": "What is the correct way to delete multiple variables at once?",
            "options": ["a) `del x, y, z`", "b) `delete x y z`", "c) `remove x, y, z`", "d) `del [x, y, z]`"],
            "answer": "a"
            },
            {
            "question": "What happens if you try to `del` a variable that doesn't exist?",
            "options": ["a) It silently does nothing", "b) It raises a `NameError`", "c) It returns `False`", "d) It creates the variable"],
            "answer": "b"
            },
            {
            "question": "Which of the following is NOT a valid way to create a string in Python?",
            "options": ["a) `my_str = 'Hello'`", "b) `my_str = \"Hello\"`", "c) `my_str = '''Hello'''`", "d) `my_str = (Hello)`"],
            "answer": "d"
            },
            {
            "question": "What does it mean that Python strings are immutable?",
            "options": ["a) They cannot be changed after creation", "b) They can only contain numeric characters", "c) They automatically convert to uppercase", "d) They can be modified in-place"],
            "answer": "a"
            },
            {
            "question": "What is the output of: `print(r'Hello\\tWorld')`?",
            "options": ["a) Hello    World", "b) Hello\\tWorld", "c) Hello\nWorld", "d) Error"],
            "answer": "b"
            }
        ]
        return questions

    def display_timer(self):
        elapsed_time = time.time() - st.session_state.start_time
        remaining_time = max(0, st.session_state.time_per_question - int(elapsed_time))

        mins, secs = divmod(remaining_time, 60)
        timer_text = f"⏱️ Time remaining: {mins:02d}:{secs:02d}"

        if remaining_time <= 0 and not st.session_state.timer_expired:
            st.session_state.timer_expired = True
            st.rerun()

        return remaining_time, timer_text

    def show_welcome_screen(self):
        st.title("Python Quiz Challenge")
        st.write("""
        This quiz contains 50 questions about Python programming and cloud computing (Questions 601-650).
        You'll have 1 minute to answer each question.
        """)

        if st.button("Start Quiz"):
            st.session_state.quiz_started = True
            st.rerun()

    def show_question(self):
        st.title("Python Quiz")

        # Display timer
        remaining_time, timer_text = self.display_timer()
        st.write(timer_text)

        if remaining_time <= 0:
            self.handle_time_expired()
            return

        # Get current question data
        question_data = self.questions[
            st.session_state.shuffled_indices[st.session_state.current_question]
        ]

        # Display question
        st.subheader(f"Question {st.session_state.current_question + 1} of {len(self.questions)} (Q{601 + st.session_state.current_question + 1})")
        st.write(question_data["question"])

        # Display options
        if 'user_answer' not in st.session_state:
            st.session_state.user_answer = None

        for option in question_data["options"]:
            if st.button(option, key=option):
                st.session_state.user_answer = option[0].lower()

        # Navigation buttons
        col1, col2, col3 = st.columns(3)

        if st.session_state.current_question > 0:
            if col1.button("Previous"):
                st.session_state.current_question -= 1
                st.session_state.user_answer = None
                st.session_state.start_time = time.time()
                st.session_state.timer_expired = False
                st.rerun()

        if st.session_state.current_question < len(self.questions) - 1:
            if col2.button("Next"):
                if st.session_state.user_answer is None:
                    st.warning("Please select an answer!")
                else:
                    self.record_answer(question_data)
                    st.session_state.current_question += 1
                    st.session_state.user_answer = None
                    st.session_state.start_time = time.time()
                    st.session_state.timer_expired = False
                    st.rerun()
        else:
            if col2.button("Submit"):
                if st.session_state.user_answer is None:
                    st.warning("Please select an answer!")
                else:
                    self.record_answer(question_data)
                    st.session_state.quiz_completed = True
                    st.rerun()

        if col3.button("Quit"):
            st.session_state.quiz_started = False
            st.rerun()

    def handle_time_expired(self):
        question_data = self.questions[
            st.session_state.shuffled_indices[st.session_state.current_question]
        ]

        self.record_answer(question_data, expired=True)

        if st.session_state.current_question < len(self.questions) - 1:
            st.session_state.current_question += 1
            st.session_state.user_answer = None
            st.session_state.start_time = time.time()
            st.session_state.timer_expired = False
            st.rerun()
        else:
            st.session_state.quiz_completed = True
            st.rerun()

    def record_answer(self, question_data, expired=False):
        if expired:
            user_answer = None
            is_correct = False
        else:
            user_answer = st.session_state.user_answer
            is_correct = (user_answer == question_data["answer"])

        answer_data = {
            "question": question_data["question"],
            "user_answer": user_answer,
            "correct_answer": question_data["answer"],
            "is_correct": is_correct,
            "time_expired": expired,
            "explanation": question_data.get("explanation", "No explanation provided.")
        }

        st.session_state.user_answers.append(answer_data)

        if is_correct:
            st.session_state.score += 1

    def show_results(self):
        st.title("Quiz Results")

        # Calculate score
        score_percent = (st.session_state.score / len(self.questions)) * 100

        # Display summary
        st.subheader(f"Your score: {st.session_state.score}/{len(self.questions)} ({score_percent:.1f}%)")

        # Detailed feedback
        st.subheader("Detailed Feedback:")

        for i, answer in enumerate(st.session_state.user_answers):
            with st.expander(f"Question {601 + i + 1}: {answer['question']}"):
                if answer['time_expired']:
                    st.error("Time expired - no answer submitted")
                elif answer['is_correct']:
                    st.success("Your answer: CORRECT")
                else:
                    st.error("Your answer: INCORRECT")
                    if answer['user_answer']:
                        st.write(f"You selected: {answer['user_answer'].upper()}")
                    st.write(f"Correct answer: {answer['correct_answer'].upper()}")

                st.write(f"Explanation: {answer['explanation']}")

        # Restart button
        if st.button("Restart Quiz"):
            self.initialize_session_state()
            st.session_state.quiz_started = True
            st.session_state.quiz_completed = False
            st.rerun()

    def run(self):
        if 'quiz_started' not in st.session_state:
            st.session_state.quiz_started = False
        if 'quiz_completed' not in st.session_state:
            st.session_state.quiz_completed = False

        if not st.session_state.quiz_started:
            self.show_welcome_screen()
        elif not st.session_state.quiz_completed:
            self.show_question()
        else:
            self.show_results()

if __name__ == "__main__":
    app = PythonQuizApp()
    app.run()